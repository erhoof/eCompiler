//
// Created by Pavel Bibichenko on 19.06.2020.
//

#include "../../include/Core/Core.h"
#include "../../include/IO/Logger.h"
#include "../../include/Lexer/Lexer.h"
#include "../../include/Parser/Parser.h"
#include "../../include/Interpreter/Temp.h"

#include <fstream>
#include <streambuf>

Core &Core::instance() {
    static Core core;

    return core;
}

int Core::loadFile(const std::string &filename) {
    Logger::instance().log("Core", "loading file " + filename);

    std::ifstream stream(filename);
    m_fileName = filename;

    if (stream) {
        Logger::instance().log("Core", "file successfully loaded!");

        m_inputFile = new std::string((std::istreambuf_iterator<char>(stream)),
                                      std::istreambuf_iterator<char>());

        Logger::instance().log("Core", "removing old ASM file...");
        std::remove("../data/main.asm");

        Logger::instance().log("Core", "creating new ASM file...");
        std::ofstream newAsm ("../data/main.asm");
        newAsm << "    ; asm file generated by eCompiler from " + filename + "\n";
        newAsm.close();

        return 0;
    } else {
        Logger::instance().log("Core", "couldn't load the file");

        dumpCore("input file was not provided.");

        return 1;
    }
}

const std::string &Core::inputFile() {
    return *m_inputFile;
}

char Core::nextChar() {
    char ch = m_inputFile->c_str()[m_charNumb];
    m_charNumb++;

    //Logger::instance().log("Core", "nextChar: " + Logger::string(ch));

    return ch;
}

void Core::dumpCore(const std::string &reason) {
    Logger::instance().log("\nFATAL ERROR: " + reason);
    Logger::instance().log("dumping the core...");

    std::exit(1);
}

void Core::process() {
    m_charNumb = 0;
    Lexer::m_line = 1;
    Node::m_labels = 0;
    Temp::m_count = 0;
    auto lexer = new Lexer();
    auto parser = new Parser(lexer);
    parser->program();

    Logger::instance().m_passages++;
}

std::string Core::filename() const {
    return m_fileName;
}